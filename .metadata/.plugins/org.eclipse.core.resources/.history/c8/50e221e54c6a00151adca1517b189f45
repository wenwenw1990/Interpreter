import java.io.Console;

public class Basic {
 
	Parser p = new Parser();
	public void processLine(String line, Program program, EvaluationContext context) {
		TokenScanner scanner = new TokenScanner(line);
		if (!scanner.hasMoreTokens()) {
			return;
		}
		String firstElement = scanner.nextToken();
		if (firstElement.equals("QUIT")) {
			quitCmd();
			return;
		}
		

		if (firstElement.equals("LIST")) {
			listCmd(program);
			return;
		}

		if (firstElement.equals("CLEAR")) {
			clearCmd(program);
			return;
		}

		if (firstElement.equals("RUN")) {
			runCmd(program, context);
			return;
		}
		
		if (firstElement.equals("PRINT") || firstElement.equals("LET") ||  firstElement.equals("INPUT")) {
			scanner.saveToken(firstElement);
			Statement stmt = p.parseStatement(scanner);
			stmt.execute(context);
			return;
		}

		if (firstElement.equals("DEBUG")) {
			Expression exp = p.parseExp(scanner);
			exp.eval(context);
			return;
		}
		
		if ((Integer.parseInt(firstElement) > 0)||(Integer.parseInt(firstElement) < 99999)) {
			int lineNumber = Integer.parseInt(firstElement);
			int numberPos = firstElement.length() + 1;
			int lineLength = line.length() - firstElement.length();
			String source = "";
			if (lineLength != 0) { // This test should be improved by just testing if there is something after
				source = line.substring(numberPos, lineLength);
			}
			editPrgCmd(program, lineNumber, source, scanner); // Try to pass only the scanner and no longer the source
			return;
		}
	}
	
	public void quitCmd() {
		 System.out.println("Bye bye!");
	}
	
	
	public  void listCmd(Program program) {int lineNumber = program.getFirstLineNumber();
	     if (lineNumber == -1) {
	          System.out.println("No program lines");
	     } else {
		while (lineNumber != -1) {
			String source = program.getSourceLine(lineNumber);
			System.out.println(lineNumber + " " + source);
			lineNumber = program.getNextLineNumber(lineNumber);
		}
	}
		
	}
	
	public void clearCmd(Program program) {
		program.clear();
	}
	
	public void editPrgCmd(Program program, int lineNumber, String lineSource, TokenScanner scanner) {
		if (lineSource.equals("")) {
			program.removeSourceLine(lineNumber);
		} else {
			program.addSourceLine(lineNumber, lineSource);
			Statement currentStmt = p.parseStatement(scanner);
			program.setParsedStatement(lineNumber, currentStmt);
		}
	}
	public void runCmd(Program program, EvaluationContext context) {
		int lineNumber = program.getFirstLineNumber();
		while (lineNumber != -1) {
			Statement currentStmt = program.getParsedStatement(lineNumber);
			lineNumber = program.getNextLineNumber(lineNumber);
			context.setCurrentLine(lineNumber);
			currentStmt.execute(context);
			lineNumber = context.getCurrentLine();
		}
	}
	
	public static void main(String[] args) {
		Basic basic = new Basic();
		EvaluationContext context = new EvaluationContext();
		Program program = new Program();
		Console con = System.console();
		while (true) {
			basic.processLine(con.readLine(), program, context);
		}
	}
	
	
	
}
